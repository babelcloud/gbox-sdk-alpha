{"version":3,"sources":["../index.ts","../src/http.ts","../src/type.ts","../src/android.ts","../src/terminal.ts","../src/client.ts"],"sourcesContent":["export {GboxClient} from './src/client';\nexport {Language, Architecture} from './src/type';","import axios, { AxiosInstance } from 'axios';\n\nfunction getHttp(baseURL: string, apiKey: string): AxiosInstance {\n    const http = axios.create({\n        baseURL: baseURL,\n        headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": `Bearer ${apiKey}`,\n        },\n    });\n\n    // 添加响应拦截器处理错误\n    http.interceptors.response.use(\n        response => response,\n        error => {\n            const errorMessage = error.response\n                ? `Request error: ${error.response.status} ${error.response.statusText} - ${JSON.stringify(error.response.data)}`\n                : error.request\n                    ? 'Request sent but no response received'\n                    : `Request configuration error: ${error.message}`;\n            \n            console.error('HTTP error:', errorMessage);\n            \n            return Promise.reject(errorMessage);\n        }\n    );\n\n    return http;\n}\n\nexport default getHttp; ","\n\nexport enum Language {\n    PYTHON = \"python\",\n    JAVASCRIPT = \"javascript\",\n}\n\nexport enum Architecture {\n    ARM64 = \"arm64\",\n    X86 = \"x86\",\n}","import { AxiosInstance } from 'axios';\nimport { Architecture } from './type';\ntype Point = [number, number];\ntype AndroidResponse = {\n    sandboxId?: string;\n    screenshot?: string;\n    [key: string]: any;\n};\n\nexport default class AndroidGbox {\n    private http: AxiosInstance;\n    public sandboxId: string | null;\n    public arch: Architecture;\n\n    constructor(http: AxiosInstance, boxId?: string, arch?: Architecture) {\n        this.http = http;\n        this.sandboxId = boxId || null;\n        if(arch) {\n            if (Object.values(Architecture).includes(arch)) {\n                this.arch = arch;\n            } else {\n                throw new Error(`Invalid architecture type: ${arch}. Should be one of the values in the Architecture enum.`);\n            }\n        }else{\n            this.arch = Architecture.X86;\n        }\n        const init = async (): Promise<AndroidGbox> => {\n            if (boxId) {\n                this.sandboxId = boxId;\n                return this;\n            }else{\n                const { data } = await this.http.post('/api/v1/gbox/android/create', {\n                    architecture: this.arch,\n                });\n                this.sandboxId = data.uid;\n                return this;\n            }\n        };\n        return init() as unknown as AndroidGbox;\n    }\n\n    async screenshot(): Promise<string> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/screenshot`, {\n            uid: this.sandboxId,\n        });\n        return data.url;\n    }\n\n    async click(x: number, y: number): Promise<AndroidResponse> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/click`, { x, y, \n            uid: this.sandboxId,\n         });\n        return data;\n    }\n\n    async scroll(start: Point, end: Point): Promise<AndroidResponse> {\n        const [startX, startY] = start;\n        const [endX, endY] = end;\n        const { data } = await this.http.post(`/api/v1/gbox/android/scroll`, { startX, startY, endX, endY, uid: this.sandboxId });\n        return data;\n    }\n\n    async keypress(key: string): Promise<AndroidResponse> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/keyPress`, { key, \n            uid: this.sandboxId,\n         });\n        return data;\n    }\n\n    async type(text: string): Promise<AndroidResponse> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/type`, { text, \n            uid: this.sandboxId,\n         });\n        return data;\n    }\n\n    async getDeviceScreenSize(): Promise<Point> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/deviceScreenSize`, {\n            uid: this.sandboxId,\n        });\n        return data;\n    }\n\n    async drag(start: Point, end: Point, duration: number): Promise<AndroidResponse> {\n        const [startX, startY] = start;\n        const [endX, endY] = end;\n        const { data } = await this.http.post(`/api/v1/gbox/android/drag`, { startX, startY, endX, endY, ms: duration, uid: this.sandboxId });\n        return data;\n    }\n} ","import { AxiosInstance } from \"axios\";\nimport { Language } from \"./type\";\n\n\n\nexport class TerminalGbox {\n\n    private http: AxiosInstance;\n    public sandboxId: string | null;\n    constructor(http: AxiosInstance, boxId?: string) {\n        this.http = http;\n        this.sandboxId = boxId || null;\n        const init = async (): Promise<TerminalGbox> => {\n            if (boxId) {\n                this.sandboxId = boxId;\n                return this;\n            }else{\n                const { data } = await this.http.post('/api/v1/gbox/terminal/create');\n                this.sandboxId = data.uid;\n                return this;\n            }\n        };\n        return init() as unknown as TerminalGbox;\n    }\n    async runCode(code: string, language?: Language): Promise<string> {\n        if (!language) {\n            language = Language.PYTHON;\n        }\n        if(Language.PYTHON !== language && Language.JAVASCRIPT !== language) {\n            throw new Error(\"Invalid language\");\n        }\n        const { data } = await this.http.post('/api/v1/gbox/terminal/runCode', {\n            uid: this.sandboxId,\n            code,\n            language,\n        });\n        return data.stdout;\n    }\n\n    async runCommand(command: string): Promise<string> {\n        const { data } = await this.http.post('/api/v1/gbox/terminal/run', {\n            uid: this.sandboxId,\n            command,\n        });\n        return data.stdout;\n    }\n\n\n}","\n\nimport getHttp from './http';\nimport AndroidGbox from './android';\nimport { AxiosInstance } from 'axios';\nimport { TerminalGbox } from './terminal';\nimport { Architecture } from './type';\n\nconst defaultBaseUrl = 'https://alpha.gbox.cloud';\n\ninterface GboxClientOptions {\n    apiKey?: string;\n    baseUrl?: string;\n}\n\ninterface initAndroidOptions {\n    boxId?: string;\n    arch?: Architecture\n}\n\ninterface initTerminalOptions {\n    boxId?: string;\n}\n\nexport class GboxClient {\n    private http: AxiosInstance;\n    constructor(options: GboxClientOptions = {}) {\n        const defaultApiKey = process.env.GBOX_API_KEY;\n        const envBaseUrl = process.env.GBOX_BASE_URL;\n        const key = options.apiKey || defaultApiKey;\n\n        if (!key) {\n            throw new Error('GBOX_API_KEY is not set on environment variables');\n        }\n\n        const baseUrlValue = options.baseUrl || envBaseUrl || defaultBaseUrl;\n\n        this.http = getHttp(baseUrlValue, key);\n    }\n\n    async initAndroid(options?: initAndroidOptions): Promise<AndroidGbox> {\n        const { boxId, arch } = options || {};\n        const android = await new AndroidGbox(this.http, boxId, arch);\n        return android;\n    }\n\n    async initTerminal(options?: initTerminalOptions): Promise<TerminalGbox> {\n        const { boxId } = options || {};\n        const terminal = await new TerminalGbox(this.http, boxId);\n        return terminal;\n    }\n}"],"mappings":"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","names":["axios","Language","Architecture"]}