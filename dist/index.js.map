{"version":3,"sources":["../src/http.ts","../src/android.ts","../src/client.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\n\nfunction getHttp(baseURL: string, apiKey: string): AxiosInstance {\n    const http = axios.create({\n        baseURL: baseURL,\n        headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": `Bearer ${apiKey}`,\n        },\n    });\n\n    // 添加响应拦截器处理错误\n    http.interceptors.response.use(\n        response => response,\n        error => {\n            const errorMessage = error.response\n                ? `请求错误: ${error.response.status} ${error.response.statusText} - ${JSON.stringify(error.response.data)}`\n                : error.request\n                    ? '请求已发送但未收到响应'\n                    : `请求配置错误: ${error.message}`;\n            \n            console.error('HTTP错误:', errorMessage);\n            \n            return Promise.reject(errorMessage);\n        }\n    );\n\n    return http;\n}\n\nexport default getHttp; ","import { AxiosInstance } from 'axios';\n\ntype Point = [number, number];\ntype AndroidResponse = {\n    sandboxId?: string;\n    screenshot?: string;\n    [key: string]: any;\n};\n\nexport default class AndroidGbox {\n    private http: AxiosInstance;\n    public sandboxId: string | null;\n\n    constructor(http: AxiosInstance, boxId?: string) {\n        this.http = http;\n        this.sandboxId = boxId || null;\n        const init = async (): Promise<AndroidGbox> => {\n            if (boxId) {\n                this.sandboxId = boxId;\n                return this;\n            }else{\n                const { data } = await this.http.post('/api/v1/gbox/android/create');\n                this.sandboxId = data.uid;\n                return this;\n            }\n        };\n        return init() as unknown as AndroidGbox;\n    }\n\n    async screenshot(): Promise<string> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/screenshot`, {\n            uid: this.sandboxId,\n        });\n        return data.url;\n    }\n\n    async click(x: number, y: number): Promise<AndroidResponse> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/click`, { x, y, \n            uid: this.sandboxId,\n         });\n        return data;\n    }\n\n    async scroll(start: Point, end: Point): Promise<AndroidResponse> {\n        const [startX, startY] = start;\n        const [endX, endY] = end;\n        const { data } = await this.http.post(`/api/v1/gbox/android/scroll`, { startX, startY, endX, endY, uid: this.sandboxId });\n        return data;\n    }\n\n    async keypress(key: string): Promise<AndroidResponse> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/keyPress`, { key, \n            uid: this.sandboxId,\n         });\n        return data;\n    }\n\n    async getDeviceScreenSize(): Promise<Point> {\n        const { data } = await this.http.post(`/api/v1/gbox/android/deviceScreenSize`, {\n            uid: this.sandboxId,\n        });\n        return data;\n    }\n\n    async drag(start: Point, end: Point, duration: number): Promise<AndroidResponse> {\n        const [startX, startY] = start;\n        const [endX, endY] = end;\n        const { data } = await this.http.post(`/api/v1/gbox/android/drag`, { startX, startY, endX, endY, ms: duration, uid: this.sandboxId });\n        return data;\n    }\n} ","\n\nimport getHttp from './http';\nimport AndroidGbox from './android';\nimport { AxiosInstance } from 'axios';\n\nconst defaultBaseUrl = 'https://gboxes.app';\nconst defaultApiKey = process.env.GBOX_API_KEY;\nconst envBaseUrl = process.env.GBOX_BASE_URL;\n\ninterface GboxClientOptions {\n    apiKey?: string;\n    baseUrl?: string;\n}\n\nexport class GboxClient {\n    private http: AxiosInstance;\n    constructor(options: GboxClientOptions = {}) {\n        const key = options.apiKey || defaultApiKey;\n    \n        if (!key) {\n            throw new Error('GBOX_API_KEY is not set on environment variables');\n        }\n        \n        const baseUrlValue = options.baseUrl || envBaseUrl || defaultBaseUrl;\n\n        this.http = getHttp(baseUrlValue, key);\n    }\n\n    async initAndroid(boxId?: string): Promise<AndroidGbox> {\n        const android = await new AndroidGbox(this.http, boxId);\n        return android;\n    }\n}"],"mappings":"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","names":[]}